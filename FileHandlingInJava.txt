Java has several types of file handlers (classes for handling file I/O), grouped based on how they operate:

---

### ðŸ”¹ 1. **Character Streams** (for text files)

* Read/write **characters** (`char`)
* Classes:

  * `FileReader` â€“ read characters
  * `FileWriter` â€“ write characters
  * `BufferedReader` â€“ efficient reading with `readLine()`
  * `BufferedWriter` â€“ efficient writing
  * `PrintWriter` â€“ convenient writing (formatted, like `System.out`)

---

### ðŸ”¹ 2. **Byte Streams** (for binary files)

* Read/write **bytes** (`byte`)
* Classes:

  * `FileInputStream` â€“ read raw bytes
  * `FileOutputStream` â€“ write raw bytes
  * `BufferedInputStream` / `BufferedOutputStream` â€“ efficient byte I/O
  * `DataInputStream` / `DataOutputStream` â€“ read/write Java primitives

---

### ðŸ”¹ 3. **NIO (New I/O) â€“ `java.nio.file` Package**

* More modern, powerful, and flexible (Java 7+)
* Classes/Interfaces:

  * `Path` â€“ represents a file/directory path
  * `Files` â€“ utility class for file operations (`readString`, `write`, `copy`, etc.)
  * `FileChannel` â€“ for fast I/O and memory-mapped files
  * `ByteBuffer` / `CharBuffer` â€“ low-level buffers

---

### ðŸ”¹ 4. **Random Access Files**

* Read/write from **any position** in a file
* Class:

  * `RandomAccessFile`

---

### ðŸ”¹ 5. **Object Streams**

* For reading/writing Java objects (serialization)
* Classes:

  * `ObjectInputStream`
  * `ObjectOutputStream`

---

### âœ… Summary Table

| Type              | Common Classes                                               | Use Case                         |
| ----------------- | ------------------------------------------------------------ | -------------------------------- |
| Character Streams | `FileReader`, `FileWriter`, `BufferedReader`                 | Text files                       |
| Byte Streams      | `FileInputStream`, `FileOutputStream`, `BufferedInputStream` | Binary files (images, audio)     |
| NIO               | `Files`, `Path`, `FileChannel`, `ByteBuffer`                 | Modern, scalable file handling   |
| Random Access     | `RandomAccessFile`                                           | Seek/read/write anywhere in file |
| Object Streams    | `ObjectInputStream`, `ObjectOutputStream`                    | Java object serialization        |

---

Let me know if you want code samples or comparisons.
